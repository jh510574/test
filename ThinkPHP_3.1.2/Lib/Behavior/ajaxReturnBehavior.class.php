<?phpdefined('THINK_PATH') or exit();/* 只处理如下5种基本数据类型php数据类型           lua数据类型--------------------------------------------------------------------------boolean               布尔(boolean):只有"true"和"false"两个值.integer/float/double  数值(number):内部以double表示.string                字符串(string), 全部转成gbkarray                 表(table)NULL                  空(nil)--------------------------------------------------------------------------*/class ajaxReturnBehavior extends Behavior{    // 行为参数定义（默认值） 可在项目配置中覆盖  protected $options = array();  // 行为扩展的执行入口必须是run  public function run(&$params){    header('Content-Type:application/octet-stream; charset=GBK');    die($this->_toLua($params));  }  /**  +----------------------------------------------------------  * 判断数组是否为自动从0开始的整数索引.  * 1) 如果$arr不是数组, 返回false;  * 2) 如果$arr有包含整数索引, 是否从0开始? 不考虑整数索引顺序  * 3) 如果是字串索引, 索引必须满足php变量名规则, 尽量简单统一,   +----------------------------------------------------------  */  private function _toLua($data){    $rVal = '';    $sType = gettype($data);    switch($sType){      case 'boolean': $data ? $rVal='true' : $rVal='false'; break;      case 'integer': $rVal = $data; break;      case 'double':  $rVal = $data; break;      case 'string':        if($this->is_utf8($data)){          $data = iconv('UTF-8', 'GBK', $data);        }        $data = addcslashes($data, "\x00..\x1F\x7F\x22\x27\x5B..\x5D");        $rVal = "'{$data}'";        break;      case 'array':        $arr = array();        foreach($data as $k=>$v){          if(preg_match_all('/^[A-Za-z0-9_]*/', $k, $aa)){  // 键名过滤            if($this->is_AutoKeyArray($data)){  // 数组索引为自动              $arr[] = $this->_toLua($v);            }else{              $arr[] = "['{$k}']=".$this->_toLua($v);            }          }        }        $rVal = '{'.implode(',', $arr).'}';        break;      default:  //NULL/object/resource/user function/unknown type        $rVal = 'nil';        break;    }    return $rVal;  }  /**  +----------------------------------------------------------  * 判断数组是否为自动从0开始的整数索引.  * 1) 如果$arr不是数组, 返回false;  * 2) 如果$arr有包含整数索引, 是否从0开始? 不考虑整数索引顺序  +----------------------------------------------------------  */  public function is_AutoKeyArray(&$arr){    if(is_array($arr) && !empty($arr)){      $keys = array_keys($arr);      sort($keys);  // 不考虑整数索引顺序      $idx = 0;     // !php数组下标从0开始      foreach($keys as $v){        if($v!=$idx){          return false;        }        $idx++;      }      return true;    }    return false;  }/* http://ascii.911cha.com/\a bell                 0x07\b back space           0x08    -- 后退\f form feed            0x0C    -- 换页\n newline              0x0A    -- 换行\r carriage return      0x0D    -- 回车\t horizontal tab       0x09    -- 制表\v vertical tab         0x0B\" double quote         0x22    -- 双引号\' single quote         0x27    -- 单引号\[ left square bracket  0x5B    -- 左中括号\\ backslash            0x5C    -- "\"\] right square bracket 0x5D    -- 右中括号$s = "\x07\x08\x0C\n\r\t\v\\\"'[]";db($s);*/  private function db($s){    $arr = array();    foreach(str_split(strtoupper(bin2hex($s)), 32) as $v){      $arr[] = implode(' ', str_split($v, 2));    }    var_dump($arr);  }  private function is_utf8($str){    $c=0; $b=0;    $bits=0;    $len=strlen($str);    for($i=0; $i<$len; $i++){      $c=ord($str[$i]);      if($c > 128){        if(($c >= 254)) return false;        elseif($c >= 252) $bits=6;        elseif($c >= 248) $bits=5;        elseif($c >= 240) $bits=4;        elseif($c >= 224) $bits=3;        elseif($c >= 192) $bits=2;        else return false;        if(($i+$bits) > $len) return false;        while($bits > 1){          $i++;          $b=ord($str[$i]);          if($b < 128 || $b > 191) return false;          $bits--;        }      }    }    return true;  }}?>